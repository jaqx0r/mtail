// Code generated by goyacc -v y.output -o parser.go -p mtail parser.y. DO NOT EDIT.

//line parser.y:5
/* #nosec G104 generated code, errors reported do not make sense */
package parser

import __yyfmt__ "fmt"

//line parser.y:6

import (
	"time"

	"github.com/golang/glog"
	"github.com/jaqx0r/mtail/internal/metrics"
	"github.com/jaqx0r/mtail/internal/runtime/compiler/ast"
	"github.com/jaqx0r/mtail/internal/runtime/compiler/position"
)

//line parser.y:19
type mtailSymType struct {
	yys       int
	intVal    int64
	floatVal  float64
	floats    []float64
	op        int
	text      string
	texts     []string
	flag      bool
	n         ast.Node
	kind      metrics.Kind
	duration  time.Duration
	logFilter *ast.LogFilter // Add this field for *ast.LogFilter
}

const INVALID = 57346
const COUNTER = 57347
const GAUGE = 57348
const TIMER = 57349
const TEXT = 57350
const HISTOGRAM = 57351
const AFTER = 57352
const AS = 57353
const BY = 57354
const CONST = 57355
const HIDDEN = 57356
const DEF = 57357
const DEL = 57358
const NEXT = 57359
const OTHERWISE = 57360
const ELSE = 57361
const STOP = 57362
const BUCKETS = 57363
const LIMIT = 57364
const BUILTIN = 57365
const REGEX = 57366
const STRING = 57367
const CAPREF = 57368
const CAPREF_NAMED = 57369
const ID = 57370
const DECO = 57371
const INTLITERAL = 57372
const FLOATLITERAL = 57373
const DURATIONLITERAL = 57374
const INC = 57375
const DEC = 57376
const DIV = 57377
const MOD = 57378
const MUL = 57379
const MINUS = 57380
const PLUS = 57381
const POW = 57382
const SHL = 57383
const SHR = 57384
const LT = 57385
const GT = 57386
const LE = 57387
const GE = 57388
const EQ = 57389
const NE = 57390
const BITAND = 57391
const XOR = 57392
const BITOR = 57393
const NOT = 57394
const AND = 57395
const OR = 57396
const ADD_ASSIGN = 57397
const ASSIGN = 57398
const MATCH = 57399
const NOT_MATCH = 57400
const LCURLY = 57401
const RCURLY = 57402
const LPAREN = 57403
const RPAREN = 57404
const LSQUARE = 57405
const RSQUARE = 57406
const COMMA = 57407
const NL = 57408
const LOGFILTER = 57409

var mtailToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INVALID",
	"COUNTER",
	"GAUGE",
	"TIMER",
	"TEXT",
	"HISTOGRAM",
	"AFTER",
	"AS",
	"BY",
	"CONST",
	"HIDDEN",
	"DEF",
	"DEL",
	"NEXT",
	"OTHERWISE",
	"ELSE",
	"STOP",
	"BUCKETS",
	"LIMIT",
	"BUILTIN",
	"REGEX",
	"STRING",
	"CAPREF",
	"CAPREF_NAMED",
	"ID",
	"DECO",
	"INTLITERAL",
	"FLOATLITERAL",
	"DURATIONLITERAL",
	"INC",
	"DEC",
	"DIV",
	"MOD",
	"MUL",
	"MINUS",
	"PLUS",
	"POW",
	"SHL",
	"SHR",
	"LT",
	"GT",
	"LE",
	"GE",
	"EQ",
	"NE",
	"BITAND",
	"XOR",
	"BITOR",
	"NOT",
	"AND",
	"OR",
	"ADD_ASSIGN",
	"ASSIGN",
	"MATCH",
	"NOT_MATCH",
	"LCURLY",
	"RCURLY",
	"LPAREN",
	"RPAREN",
	"LSQUARE",
	"RSQUARE",
	"COMMA",
	"NL",
	"LOGFILTER",
}

var mtailStatenames = [...]string{}

const mtailEofCode = 1
const mtailErrCode = 2
const mtailInitialStackSize = 16

//line parser.y:768

// tokenpos returns the position of the current token.
func tokenpos(mtaillex mtailLexer) position.Position {
	return mtaillex.(*parser).t.Pos
}

// markedpos returns the position recorded from the most recent mark_pos
// production.
func markedpos(mtaillex mtailLexer) position.Position {
	return mtaillex.(*parser).pos
}

// positionFromMark returns a position spanning from the last mark to the current position.
func positionFromMark(mtaillex mtailLexer) position.Position {
	tp := tokenpos(mtaillex)
	mp := markedpos(mtaillex)
	return *position.Merge(&mp, &tp)
}

//line yacctab:1
var mtailExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	5, 98,
	6, 98,
	7, 98,
	8, 98,
	9, 98,
	-2, 129,
	-1, 24,
	66, 29,
	-2, 73,
	-1, 114,
	5, 98,
	6, 98,
	7, 98,
	8, 98,
	9, 98,
	-2, 129,
}

const mtailPrivate = 57344

const mtailLast = 256

var mtailAct = [...]uint8{
	50, 180, 95, 134, 30, 17, 98, 44, 46, 29,
	53, 43, 135, 31, 26, 22, 93, 42, 176, 24,
	136, 172, 32, 21, 47, 111, 28, 27, 38, 36,
	37, 45, 61, 40, 41, 14, 171, 172, 94, 133,
	92, 189, 49, 188, 12, 25, 112, 96, 11, 116,
	54, 13, 97, 83, 84, 33, 38, 36, 37, 45,
	2, 40, 41, 75, 39, 94, 115, 81, 80, 177,
	119, 69, 70, 38, 36, 37, 45, 120, 40, 41,
	138, 69, 70, 33, 38, 36, 37, 45, 57, 40,
	41, 110, 39, 77, 79, 78, 178, 18, 15, 137,
	33, 86, 87, 88, 89, 90, 91, 100, 101, 39,
	147, 104, 103, 143, 56, 114, 186, 17, 45, 137,
	39, 29, 73, 74, 145, 142, 57, 22, 118, 150,
	143, 24, 182, 94, 137, 21, 169, 94, 160, 164,
	149, 163, 166, 167, 94, 94, 94, 173, 175, 174,
	170, 165, 168, 162, 161, 144, 148, 181, 151, 56,
	125, 192, 191, 126, 107, 108, 106, 127, 128, 109,
	185, 184, 129, 130, 131, 137, 187, 132, 117, 1,
	71, 73, 74, 14, 52, 124, 113, 51, 123, 181,
	190, 139, 12, 25, 140, 4, 11, 141, 183, 13,
	58, 60, 68, 55, 38, 36, 37, 45, 56, 40,
	41, 157, 156, 154, 59, 63, 64, 65, 66, 67,
	57, 158, 159, 72, 82, 105, 102, 76, 99, 85,
	20, 33, 48, 179, 152, 153, 155, 62, 35, 146,
	39, 122, 10, 9, 8, 18, 15, 121, 7, 34,
	23, 19, 6, 16, 5, 3,
}

var mtailPact = [...]int16{
	-1000, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 90, -1000, -1000, 159, -9, 185, -1000, -34,
	210, 28, 28, -1000, 89, -1000, 24, 44, -1000, 12,
	-4, -1000, 58, 3, -16, -1000, -1000, -1000, -1000, 3,
	-1000, -1000, 66, -1000, 73, -1000, 129, -41, -19, -1000,
	-1000, -1000, -1000, 167, -1000, -9, -12, -1000, 100, -9,
	59, -1000, 160, -1000, -1000, -1000, -1000, -1000, -41, -1000,
	-1000, -41, -1000, -1000, -1000, -41, -41, -1000, -1000, -1000,
	-41, -41, -41, -1000, -1000, -41, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 89, -1000, 136, 3, 18, -1000, -41,
	-1000, -1000, -41, -1000, -1000, -41, -1000, -1000, -1000, -1000,
	-1000, -1000, 159, -9, 179, -1000, 48, 116, -9, -1000,
	148, 200, -1000, -1000, -1000, 3, 3, 90, 3, 3,
	3, 59, 3, -28, -1000, 28, -1000, 91, -1000, 3,
	3, 3, 24, 53, -1000, -1000, -1000, -1000, -44, 34,
	-1000, 64, -1000, -1000, -1000, -1000, 159, 107, 140, 86,
	28, 44, -1000, -1000, -1000, 58, 28, 28, -1000, -1000,
	66, -1000, 3, 73, 129, -1000, -1000, -1000, -1000, -22,
	-1000, -1000, -1000, -24, -1000, -1000, -1000, -1000, 159, 131,
	-1000, -1000, -1000,
}

var mtailPgo = [...]uint8{
	0, 60, 255, 39, 10, 254, 253, 252, 251, 4,
	8, 7, 16, 6, 250, 22, 17, 27, 12, 249,
	11, 14, 20, 248, 247, 244, 243, 13, 26, 242,
	241, 238, 3, 237, 236, 235, 0, 1, 42, 234,
	233, 232, 230, 229, 228, 227, 180, 226, 225, 224,
	223, 213, 198, 195, 179, 91, 2, 178,
}

var mtailR1 = [...]int8{
	0, 54, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 53, 41, 41, 38, 5,
	5, 5, 6, 6, 6, 7, 7, 4, 8, 8,
	14, 14, 18, 18, 18, 18, 46, 46, 17, 17,
	45, 45, 45, 15, 15, 43, 43, 43, 43, 43,
	43, 16, 16, 44, 44, 11, 11, 47, 47, 28,
	28, 49, 49, 22, 21, 21, 21, 10, 10, 48,
	48, 48, 48, 13, 13, 12, 12, 50, 50, 9,
	9, 9, 9, 9, 9, 9, 9, 19, 19, 20,
	31, 31, 3, 3, 32, 32, 27, 23, 42, 42,
	24, 24, 24, 24, 24, 30, 30, 33, 33, 33,
	33, 33, 39, 40, 40, 37, 35, 34, 51, 52,
	52, 52, 52, 25, 26, 29, 29, 36, 36, 56,
	57, 55, 55,
}

var mtailR2 = [...]int8{
	0, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 1, 2, 1, 3, 1, 4,
	2, 3, 1, 4, 1, 1, 2, 3, 1, 1,
	4, 4, 1, 1, 4, 4, 1, 1, 1, 4,
	1, 1, 1, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 4, 1, 1, 4,
	4, 1, 1, 1, 1, 4, 4, 1, 4, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 4, 1,
	4, 5, 1, 3, 1, 1, 5, 3, 0, 1,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 3, 1, 2, 2, 2, 1,
	1, 3, 3, 4, 3, 5, 3, 1, 1, 0,
	0, 0, 1,
}

var mtailChk = [...]int16{
	-1000, -54, -1, -2, -53, -5, -7, -23, -25, -26,
	-29, 17, 13, 20, 4, 67, -6, -56, 66, -8,
	-42, -22, -18, -14, -12, 14, -21, -17, -28, -13,
	-9, -27, -15, 52, -19, -31, 26, 27, 25, 61,
	30, 31, -16, -20, -11, 28, -10, -20, -41, -38,
	-36, 28, 25, -4, 59, 18, 23, 35, 15, 29,
	16, 66, -33, 5, 6, 7, 8, 9, -46, 53,
	54, -46, -50, 33, 34, 39, -45, 49, 51, 50,
	56, 55, -49, 57, 58, -43, 43, 44, 45, 46,
	47, 48, -13, -12, -9, -56, 63, -18, -13, -44,
	41, 42, -47, 39, 38, -48, 37, 35, 36, 40,
	-55, 66, 65, 19, -1, -4, 61, -57, 28, -4,
	-12, -24, -30, 28, 25, -55, -55, -55, -55, -55,
	-55, -55, -55, -3, -32, -18, -22, -56, 62, -55,
	-55, -55, -21, -56, -38, -4, 60, 62, -3, 24,
	-4, 10, -39, -35, -51, -34, 12, 11, 21, 22,
	-18, -17, -28, -27, -20, -15, -18, -18, -22, -9,
	-16, 64, 65, -11, -10, -13, 62, 35, 32, -40,
	-37, -36, 25, -52, 31, 30, 30, -32, 65, 65,
	-37, 31, 30,
}

var mtailDef = [...]int16{
	2, -2, -2, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 0, 13, 14, 0, 0, 0, 25, 0,
	0, 22, 24, 28, -2, 99, 63, 32, 33, 67,
	75, 64, 38, 129, 79, 80, 81, 82, 83, 129,
	85, 86, 43, 87, 51, 89, 55, 131, 15, 16,
	18, 127, 128, 20, 2, 0, 0, 130, 0, 0,
	129, 26, 0, 107, 108, 109, 110, 111, 131, 36,
	37, 131, 76, 77, 78, 131, 131, 40, 41, 42,
	131, 131, 131, 61, 62, 131, 45, 46, 47, 48,
	49, 50, 74, 73, 75, 0, 129, 0, 67, 131,
	53, 54, 131, 57, 58, 131, 69, 70, 71, 72,
	129, 132, 0, 0, -2, 21, 129, 0, 0, 124,
	126, 97, 104, 105, 106, 129, 129, 129, 129, 129,
	129, 129, 129, 0, 92, 94, 95, 0, 84, 129,
	129, 129, 12, 0, 17, 19, 27, 90, 0, 0,
	123, 0, 100, 101, 102, 103, 0, 0, 0, 0,
	23, 34, 35, 65, 66, 39, 30, 31, 59, 60,
	44, 88, 129, 52, 56, 68, 91, 96, 125, 112,
	113, 115, 116, 118, 119, 120, 117, 93, 0, 0,
	114, 121, 122,
}

var mtailTok1 = [...]int8{
	1,
}

var mtailTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67,
}

var mtailTok3 = [...]int8{
	0,
}

var mtailErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
	{117, 4, "unexpected end of file, expecting '/' to end regex"},
	{17, 1, "unexpected end of file, expecting '}' to end block"},
	{17, 1, "unexpected end of file, expecting '}' to end block"},
	{17, 1, "unexpected end of file, expecting '}' to end block"},
	{16, 63, "unexpected indexing of an expression"},
	{16, 66, "statement with no effect, missing an assignment, `+' concatenation, or `{}' block?"},
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	mtailDebug        = 0
	mtailErrorVerbose = false
)

type mtailLexer interface {
	Lex(lval *mtailSymType) int
	Error(s string)
}

type mtailParser interface {
	Parse(mtailLexer) int
	Lookahead() int
}

type mtailParserImpl struct {
	lval  mtailSymType
	stack [mtailInitialStackSize]mtailSymType
	char  int
}

func (p *mtailParserImpl) Lookahead() int {
	return p.char
}

func mtailNewParser() mtailParser {
	return &mtailParserImpl{}
}

const mtailFlag = -1000

func mtailTokname(c int) string {
	if c >= 1 && c-1 < len(mtailToknames) {
		if mtailToknames[c-1] != "" {
			return mtailToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mtailStatname(s int) string {
	if s >= 0 && s < len(mtailStatenames) {
		if mtailStatenames[s] != "" {
			return mtailStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mtailErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mtailErrorVerbose {
		return "syntax error"
	}

	for _, e := range mtailErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mtailTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(mtailPact[state])
	for tok := TOKSTART; tok-1 < len(mtailToknames); tok++ {
		if n := base + tok; n >= 0 && n < mtailLast && int(mtailChk[int(mtailAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mtailDef[state] == -2 {
		i := 0
		for mtailExca[i] != -1 || int(mtailExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mtailExca[i] >= 0; i += 2 {
			tok := int(mtailExca[i])
			if tok < TOKSTART || mtailExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mtailExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mtailTokname(tok)
	}
	return res
}

func mtaillex1(lex mtailLexer, lval *mtailSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(mtailTok1[0])
		goto out
	}
	if char < len(mtailTok1) {
		token = int(mtailTok1[char])
		goto out
	}
	if char >= mtailPrivate {
		if char < mtailPrivate+len(mtailTok2) {
			token = int(mtailTok2[char-mtailPrivate])
			goto out
		}
	}
	for i := 0; i < len(mtailTok3); i += 2 {
		token = int(mtailTok3[i+0])
		if token == char {
			token = int(mtailTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(mtailTok2[1]) /* unknown char */
	}
	if mtailDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", mtailTokname(token), uint(char))
	}
	return char, token
}

func mtailParse(mtaillex mtailLexer) int {
	return mtailNewParser().Parse(mtaillex)
}

func (mtailrcvr *mtailParserImpl) Parse(mtaillex mtailLexer) int {
	var mtailn int
	var mtailVAL mtailSymType
	var mtailDollar []mtailSymType
	_ = mtailDollar // silence set and not used
	mtailS := mtailrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mtailstate := 0
	mtailrcvr.char = -1
	mtailtoken := -1 // mtailrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mtailstate = -1
		mtailrcvr.char = -1
		mtailtoken = -1
	}()
	mtailp := -1
	goto mtailstack

ret0:
	return 0

ret1:
	return 1

mtailstack:
	/* put a state and value onto the stack */
	if mtailDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mtailTokname(mtailtoken), mtailStatname(mtailstate))
	}

	mtailp++
	if mtailp >= len(mtailS) {
		nyys := make([]mtailSymType, len(mtailS)*2)
		copy(nyys, mtailS)
		mtailS = nyys
	}
	mtailS[mtailp] = mtailVAL
	mtailS[mtailp].yys = mtailstate

mtailnewstate:
	mtailn = int(mtailPact[mtailstate])
	if mtailn <= mtailFlag {
		goto mtaildefault /* simple state */
	}
	if mtailrcvr.char < 0 {
		mtailrcvr.char, mtailtoken = mtaillex1(mtaillex, &mtailrcvr.lval)
	}
	mtailn += mtailtoken
	if mtailn < 0 || mtailn >= mtailLast {
		goto mtaildefault
	}
	mtailn = int(mtailAct[mtailn])
	if int(mtailChk[mtailn]) == mtailtoken { /* valid shift */
		mtailrcvr.char = -1
		mtailtoken = -1
		mtailVAL = mtailrcvr.lval
		mtailstate = mtailn
		if Errflag > 0 {
			Errflag--
		}
		goto mtailstack
	}

mtaildefault:
	/* default state action */
	mtailn = int(mtailDef[mtailstate])
	if mtailn == -2 {
		if mtailrcvr.char < 0 {
			mtailrcvr.char, mtailtoken = mtaillex1(mtaillex, &mtailrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mtailExca[xi+0] == -1 && int(mtailExca[xi+1]) == mtailstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mtailn = int(mtailExca[xi+0])
			if mtailn < 0 || mtailn == mtailtoken {
				break
			}
		}
		mtailn = int(mtailExca[xi+1])
		if mtailn < 0 {
			goto ret0
		}
	}
	if mtailn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mtaillex.Error(mtailErrorMessage(mtailstate, mtailtoken))
			Nerrs++
			if mtailDebug >= 1 {
				__yyfmt__.Printf("%s", mtailStatname(mtailstate))
				__yyfmt__.Printf(" saw %s\n", mtailTokname(mtailtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mtailp >= 0 {
				mtailn = int(mtailPact[mtailS[mtailp].yys]) + mtailErrCode
				if mtailn >= 0 && mtailn < mtailLast {
					mtailstate = int(mtailAct[mtailn]) /* simulate a shift of "error" */
					if int(mtailChk[mtailstate]) == mtailErrCode {
						goto mtailstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mtailDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", mtailS[mtailp].yys)
				}
				mtailp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mtailDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mtailTokname(mtailtoken))
			}
			if mtailtoken == mtailEofCode {
				goto ret1
			}
			mtailrcvr.char = -1
			mtailtoken = -1
			goto mtailnewstate /* try again in the same state */
		}
	}

	/* reduction by production mtailn */
	if mtailDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mtailn, mtailStatname(mtailstate))
	}

	mtailnt := mtailn
	mtailpt := mtailp
	_ = mtailpt // guard against "declared and not used"

	mtailp -= int(mtailR2[mtailn])
	// mtailp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if mtailp+1 >= len(mtailS) {
		nyys := make([]mtailSymType, len(mtailS)*2)
		copy(nyys, mtailS)
		mtailS = nyys
	}
	mtailVAL = mtailS[mtailp+1]

	/* consult goto table to find next state */
	mtailn = int(mtailR1[mtailn])
	mtailg := int(mtailPgo[mtailn])
	mtailj := mtailg + mtailS[mtailp].yys + 1

	if mtailj >= mtailLast {
		mtailstate = int(mtailAct[mtailg])
	} else {
		mtailstate = int(mtailAct[mtailj])
		if int(mtailChk[mtailstate]) != -mtailn {
			mtailstate = int(mtailAct[mtailg])
		}
	}
	// dummy call; replaced with literal code
	switch mtailnt {

	case 1:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:96
		{
			mtaillex.(*parser).root = mtailDollar[1].n
		}
	case 2:
		mtailDollar = mtailS[mtailpt-0 : mtailpt+1]
//line parser.y:104
		{
			mtailVAL.n = &ast.StmtList{}
		}
	case 3:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:108
		{
			mtailVAL.n = mtailDollar[1].n
			if mtailDollar[2].n != nil {
				mtailVAL.n.(*ast.StmtList).Children = append(mtailVAL.n.(*ast.StmtList).Children, mtailDollar[2].n)
			}
		}
	case 4:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:119
		{
			mtailVAL.n = mtailDollar[1].logFilter
		}
	case 5:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:121
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 6:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:123
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 7:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:125
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 8:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:127
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 9:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:129
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 10:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:131
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 11:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:133
		{
			mtailVAL.n = &ast.NextStmt{tokenpos(mtaillex)}
		}
	case 12:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:137
		{
			mtailVAL.n = &ast.PatternFragment{ID: mtailDollar[2].n, Expr: mtailDollar[4].n}
		}
	case 13:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:141
		{
			mtailVAL.n = &ast.StopStmt{tokenpos(mtaillex)}
		}
	case 14:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:145
		{
			mtailVAL.n = &ast.Error{tokenpos(mtaillex), mtailDollar[1].text}
		}
	case 15:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:154
		{
			mtailVAL.logFilter = &ast.LogFilter{
				P:       tokenpos(mtaillex),
				Filters: mtailDollar[2].texts, // $2 is the list of strings (type []string)
			}
		}
	case 16:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:164
		{
			mtailVAL.texts = make([]string, 0)
			mtailVAL.texts = append(mtailVAL.texts, mtailDollar[1].text)
		}
	case 17:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:169
		{
			mtailVAL.texts = mtailDollar[1].texts
			mtailVAL.texts = append(mtailVAL.texts, mtailDollar[3].text)
		}
	case 18:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:177
		{
			mtailVAL.text = mtailDollar[1].text
		}
	case 19:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:183
		{
			mtailVAL.n = &ast.CondStmt{mtailDollar[1].n, mtailDollar[2].n, mtailDollar[4].n, nil}
		}
	case 20:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:187
		{
			if mtailDollar[1].n != nil {
				mtailVAL.n = &ast.CondStmt{mtailDollar[1].n, mtailDollar[2].n, nil, nil}
			} else {
				mtailVAL.n = mtailDollar[2].n
			}
		}
	case 21:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:195
		{
			o := &ast.OtherwiseStmt{positionFromMark(mtaillex)}
			mtailVAL.n = &ast.CondStmt{o, mtailDollar[3].n, nil, nil}
		}
	case 22:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:203
		{
			mtailVAL.n = &ast.UnaryExpr{P: tokenpos(mtaillex), Expr: mtailDollar[1].n, Op: MATCH}
		}
	case 23:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:207
		{
			mtailVAL.n = &ast.BinaryExpr{
				LHS: &ast.UnaryExpr{P: tokenpos(mtaillex), Expr: mtailDollar[1].n, Op: MATCH},
				RHS: mtailDollar[4].n,
				Op:  mtailDollar[2].op,
			}
		}
	case 24:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:215
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 25:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:221
		{
			mtailVAL.n = nil
		}
	case 26:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:223
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 27:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:229
		{
			mtailVAL.n = mtailDollar[2].n
		}
	case 28:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:237
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 29:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:239
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 30:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:245
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 31:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:249
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 32:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:257
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 33:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:259
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 34:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:261
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 35:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:265
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 36:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:272
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 37:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:274
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 38:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:280
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 39:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:282
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 40:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:289
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 41:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:291
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 42:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:293
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 43:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:299
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 44:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:301
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 45:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:308
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 46:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:310
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 47:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:312
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 48:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:314
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 49:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:316
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 50:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:318
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 51:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:324
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 52:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:326
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 53:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:333
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 54:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:335
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 55:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:341
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 56:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:343
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 57:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:350
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 58:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:352
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 59:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:358
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 60:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:362
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 61:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:369
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 62:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:371
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 63:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:378
		{
			mtailVAL.n = &ast.PatternExpr{Expr: mtailDollar[1].n}
		}
	case 64:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:386
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 65:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:388
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: PLUS}
		}
	case 66:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:392
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: PLUS}
		}
	case 67:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:400
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 68:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:402
		{
			mtailVAL.n = &ast.BinaryExpr{LHS: mtailDollar[1].n, RHS: mtailDollar[4].n, Op: mtailDollar[2].op}
		}
	case 69:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:409
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 70:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:411
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 71:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:413
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 72:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:415
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 73:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:421
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 74:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:423
		{
			mtailVAL.n = &ast.UnaryExpr{P: tokenpos(mtaillex), Expr: mtailDollar[2].n, Op: mtailDollar[1].op}
		}
	case 75:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:431
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 76:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:433
		{
			mtailVAL.n = &ast.UnaryExpr{P: tokenpos(mtaillex), Expr: mtailDollar[1].n, Op: mtailDollar[2].op}
		}
	case 77:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:440
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 78:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:442
		{
			mtailVAL.op = mtailDollar[1].op
		}
	case 79:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:448
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 80:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:450
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 81:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:452
		{
			mtailVAL.n = &ast.CaprefTerm{tokenpos(mtaillex), mtailDollar[1].text, false, nil}
		}
	case 82:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:456
		{
			mtailVAL.n = &ast.CaprefTerm{tokenpos(mtaillex), mtailDollar[1].text, true, nil}
		}
	case 83:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:460
		{
			mtailVAL.n = &ast.StringLit{tokenpos(mtaillex), mtailDollar[1].text}
		}
	case 84:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:464
		{
			mtailVAL.n = mtailDollar[2].n
		}
	case 85:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:468
		{
			mtailVAL.n = &ast.IntLit{tokenpos(mtaillex), mtailDollar[1].intVal}
		}
	case 86:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:472
		{
			mtailVAL.n = &ast.FloatLit{tokenpos(mtaillex), mtailDollar[1].floatVal}
		}
	case 87:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:480
		{
			// Build an empty IndexedExpr so that the recursive rule below doesn't need to handle the alternative.
			mtailVAL.n = &ast.IndexedExpr{LHS: mtailDollar[1].n, Index: &ast.ExprList{}}
		}
	case 88:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:485
		{
			mtailVAL.n = mtailDollar[1].n
			mtailVAL.n.(*ast.IndexedExpr).Index.(*ast.ExprList).Children = append(
				mtailVAL.n.(*ast.IndexedExpr).Index.(*ast.ExprList).Children,
				mtailDollar[3].n.(*ast.ExprList).Children...)
		}
	case 89:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:496
		{
			mtailVAL.n = &ast.IDTerm{tokenpos(mtaillex), mtailDollar[1].text, nil, false}
		}
	case 90:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:504
		{
			mtailVAL.n = &ast.BuiltinExpr{P: positionFromMark(mtaillex), Name: mtailDollar[2].text, Args: nil}
		}
	case 91:
		mtailDollar = mtailS[mtailpt-5 : mtailpt+1]
//line parser.y:508
		{
			mtailVAL.n = &ast.BuiltinExpr{P: positionFromMark(mtaillex), Name: mtailDollar[2].text, Args: mtailDollar[4].n}
		}
	case 92:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:517
		{
			mtailVAL.n = &ast.ExprList{}
			mtailVAL.n.(*ast.ExprList).Children = append(mtailVAL.n.(*ast.ExprList).Children, mtailDollar[1].n)
		}
	case 93:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:522
		{
			mtailVAL.n = mtailDollar[1].n
			mtailVAL.n.(*ast.ExprList).Children = append(mtailVAL.n.(*ast.ExprList).Children, mtailDollar[3].n)
		}
	case 94:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:530
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 95:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:532
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 96:
		mtailDollar = mtailS[mtailpt-5 : mtailpt+1]
//line parser.y:538
		{
			mtailVAL.n = &ast.PatternLit{P: positionFromMark(mtaillex), Pattern: mtailDollar[4].text}
		}
	case 97:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:546
		{
			mtailVAL.n = mtailDollar[3].n
			d := mtailVAL.n.(*ast.VarDecl)
			d.Kind = mtailDollar[2].kind
			d.Hidden = mtailDollar[1].flag
		}
	case 98:
		mtailDollar = mtailS[mtailpt-0 : mtailpt+1]
//line parser.y:557
		{
			mtailVAL.flag = false
		}
	case 99:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:561
		{
			mtailVAL.flag = true
		}
	case 100:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:569
		{
			mtailVAL.n = mtailDollar[1].n
			mtailVAL.n.(*ast.VarDecl).Keys = mtailDollar[2].texts
		}
	case 101:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:574
		{
			mtailVAL.n = mtailDollar[1].n
			mtailVAL.n.(*ast.VarDecl).ExportedName = mtailDollar[2].text
		}
	case 102:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:579
		{
			mtailVAL.n = mtailDollar[1].n
			mtailVAL.n.(*ast.VarDecl).Buckets = mtailDollar[2].floats
		}
	case 103:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:584
		{
			mtailVAL.n = mtailDollar[1].n
			mtailVAL.n.(*ast.VarDecl).Limit = mtailDollar[2].intVal
		}
	case 104:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:589
		{
			mtailVAL.n = mtailDollar[1].n
		}
	case 105:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:597
		{
			mtailVAL.n = &ast.VarDecl{P: tokenpos(mtaillex), Name: mtailDollar[1].text}
		}
	case 106:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:601
		{
			mtailVAL.n = &ast.VarDecl{P: tokenpos(mtaillex), Name: mtailDollar[1].text}
		}
	case 107:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:609
		{
			mtailVAL.kind = metrics.Counter
		}
	case 108:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:613
		{
			mtailVAL.kind = metrics.Gauge
		}
	case 109:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:617
		{
			mtailVAL.kind = metrics.Timer
		}
	case 110:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:621
		{
			mtailVAL.kind = metrics.Text
		}
	case 111:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:625
		{
			mtailVAL.kind = metrics.Histogram
		}
	case 112:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:633
		{
			mtailVAL.texts = mtailDollar[2].texts
		}
	case 113:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:640
		{
			mtailVAL.texts = make([]string, 0)
			mtailVAL.texts = append(mtailVAL.texts, mtailDollar[1].text)
		}
	case 114:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:645
		{
			mtailVAL.texts = mtailDollar[1].texts
			mtailVAL.texts = append(mtailVAL.texts, mtailDollar[3].text)
		}
	case 115:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:653
		{
			mtailVAL.text = mtailDollar[1].text
		}
	case 116:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:659
		{
			mtailVAL.text = mtailDollar[2].text
		}
	case 117:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:666
		{
			mtailVAL.intVal = mtailDollar[2].intVal
		}
	case 118:
		mtailDollar = mtailS[mtailpt-2 : mtailpt+1]
//line parser.y:674
		{
			mtailVAL.floats = mtailDollar[2].floats
		}
	case 119:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:680
		{
			mtailVAL.floats = make([]float64, 0)
			mtailVAL.floats = append(mtailVAL.floats, mtailDollar[1].floatVal)
		}
	case 120:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:685
		{
			mtailVAL.floats = make([]float64, 0)
			mtailVAL.floats = append(mtailVAL.floats, float64(mtailDollar[1].intVal))
		}
	case 121:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:690
		{
			mtailVAL.floats = mtailDollar[1].floats
			mtailVAL.floats = append(mtailVAL.floats, mtailDollar[3].floatVal)
		}
	case 122:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:695
		{
			mtailVAL.floats = mtailDollar[1].floats
			mtailVAL.floats = append(mtailVAL.floats, float64(mtailDollar[3].intVal))
		}
	case 123:
		mtailDollar = mtailS[mtailpt-4 : mtailpt+1]
//line parser.y:703
		{
			mtailVAL.n = &ast.DecoDecl{P: markedpos(mtaillex), Name: mtailDollar[3].text, Block: mtailDollar[4].n}
		}
	case 124:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:711
		{
			mtailVAL.n = &ast.DecoStmt{markedpos(mtaillex), mtailDollar[2].text, mtailDollar[3].n, nil, nil}
		}
	case 125:
		mtailDollar = mtailS[mtailpt-5 : mtailpt+1]
//line parser.y:719
		{
			mtailVAL.n = &ast.DelStmt{P: positionFromMark(mtaillex), N: mtailDollar[3].n, Expiry: mtailDollar[5].duration}
		}
	case 126:
		mtailDollar = mtailS[mtailpt-3 : mtailpt+1]
//line parser.y:723
		{
			mtailVAL.n = &ast.DelStmt{P: positionFromMark(mtaillex), N: mtailDollar[3].n}
		}
	case 127:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:730
		{
			mtailVAL.text = mtailDollar[1].text
		}
	case 128:
		mtailDollar = mtailS[mtailpt-1 : mtailpt+1]
//line parser.y:734
		{
			mtailVAL.text = mtailDollar[1].text
		}
	case 129:
		mtailDollar = mtailS[mtailpt-0 : mtailpt+1]
//line parser.y:744
		{
			glog.V(2).Infof("position marked at %v", tokenpos(mtaillex))
			mtaillex.(*parser).pos = tokenpos(mtaillex)
		}
	case 130:
		mtailDollar = mtailS[mtailpt-0 : mtailpt+1]
//line parser.y:754
		{
			mtaillex.(*parser).inRegex()
		}
	}
	goto mtailstack /* stack new state and value */
}
